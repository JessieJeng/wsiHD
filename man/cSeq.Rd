% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cSeq.R
\name{cSeq}
\alias{cSeq}
\alias{cSeq,ANY-method}
\alias{cSeq,matrix-method}
\alias{cSeq,big.matrix-method}
\alias{cSeq,ff_matrix-method}
\title{Bounding Sequence}
\usage{
cSeq(pval_null, ...)

\S4method{cSeq}{ANY}(pval_null, ...)

\S4method{cSeq}{matrix}(pval_null, alpha = 0.1)

\S4method{cSeq}{big.matrix}(pval_null, alpha = 0.1)

\S4method{cSeq}{ff_matrix}(pval_null, alpha = 0.1)
}
\arguments{
\item{pval_null}{A numeric matrix object, a big.matrix object, or an
ff_matrix object of dimension {p x n}. The p-values generated 
from the null distribution. The columns correspond to the samples (n),
the rows to the signals (p).}

\item{...}{Ignored.}

\item{alpha}{A numeric object. The significance level. The bounding sequence
is estimated as the (1-alpha)-th quantile.}
}
\value{
An S3 object of class wsiHD comprising a list of length 2. 
   \item{$c05}{is the bounding sequence estimated with delta as the 
               square root of the p-value.}
   \item{$c1}{is that with delta equal to the p-value.}
}
\description{
Estimates the bounding sequence.
}
\details{
The p-values can be provided as a numeric matrix, a big.matrix as defined
  by the bigmemory package, or as an ff_matrix as defined by the ff package.
  The latter two options allow for larger matrices. Please see the 
  documentation of these packages for details on creating objects.

The quantile() function of base R provides 9 algorithms for estimating
  the quantile, which are based on the definitions of Hyndman and Fan (1996). 
  We have chosen the default (type = 7) here. However,
  the quantile algorithm implemented in Armadillo is type = 5 and that
  of ff is type = 1.
  Thus the results obtained using base, bigmemory, and ff objects
  containing equivalent data might differ slightly.
}
\examples{

   data(wsiData)

   set.seed(1234)

   # limit data to expedite example
   smp <- sample(x = 2:4089, size = 500, replace = FALSE)

   Sigma <- stats::cor(x = wsiData[,smp])

   n <- 100L
   p <- ncol(x = Sigma)

   zz <- MASS::mvrnorm(n = n, mu = rep(x = 0.0, times = p), Sigma = Sigma)
   pval_null <- {1.0 - stats::pnorm(q = abs(x = zz))}*2.0

   cSeq(pval_null = pval_null, alpha = 0.1)

}
